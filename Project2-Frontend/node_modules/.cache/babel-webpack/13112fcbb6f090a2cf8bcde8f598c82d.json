{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/atkus/Documents/Revature/p2-recipebook/Project2-Frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n/*const httpOptions = {\r\n  Headers: new HttpHeaders({'Content-Type': 'application/json'})\r\n};*/\n\nexport class LoginService {\n  //private url = 'http://localhost:8090/login';\n  constructor(http) {\n    this.http = http;\n    this.logurl = \"http://localhost:8090/login\";\n    this.usurl = \"http://localhost:8090/returnuser\";\n    this.regurl = \"http://localhost:8090/register\";\n  }\n\n  login(username, password) {\n    const encodedCredentials = btoa(`${username}:${password}`);\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Authorization': `Basic ${encodedCredentials}`\n      })\n    };\n    return this.http.post(this.logurl, {\n      username,\n      password\n    }, {\n      withCredentials: true\n    });\n  }\n\n  getUser(username, password) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      let user;\n      var body = {\n        username: username,\n        password: password\n      };\n      let response = yield fetch(_this.usurl, {\n        method: \"POST\",\n        mode: 'cors',\n        body: JSON.stringify(body),\n        credentials: \"include\"\n      });\n      let data = yield response.json();\n\n      if (response.status === 200) {\n        user = data;\n        localStorage.setItem('fName', data.firstname);\n        localStorage.setItem('lName', data.lastname);\n        localStorage.setItem('dob', data.dob);\n        localStorage.setItem('email', data.email);\n        localStorage.setItem('id', data.user_id);\n        console.log(user);\n      }\n\n      return user;\n    })();\n  }\n\n  register(username, email, password) {\n    return this.http.post(this.regurl, {\n      username,\n      email,\n      password\n    });\n  }\n\n}\n\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/atkus/Documents/Revature/p2-recipebook/Project2-Frontend/src/app/services/login.service.ts"],"names":["HttpHeaders","i0","i1","LoginService","constructor","http","logurl","usurl","regurl","login","username","password","encodedCredentials","btoa","httpOptions","headers","post","withCredentials","getUser","user","body","response","fetch","method","mode","JSON","stringify","credentials","data","json","status","localStorage","setItem","firstname","lastname","dob","email","user_id","console","log","register","ɵfac","LoginService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpHeaders } from '@angular/common/http';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\n/*const httpOptions = {\r\n  Headers: new HttpHeaders({'Content-Type': 'application/json'})\r\n};*/\r\nexport class LoginService {\r\n    //private url = 'http://localhost:8090/login';\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.logurl = \"http://localhost:8090/login\";\r\n        this.usurl = \"http://localhost:8090/returnuser\";\r\n        this.regurl = \"http://localhost:8090/register\";\r\n    }\r\n    login(username, password) {\r\n        const encodedCredentials = btoa(`${username}:${password}`);\r\n        const httpOptions = {\r\n            headers: new HttpHeaders({\r\n                'Authorization': `Basic ${encodedCredentials}`\r\n            })\r\n        };\r\n        return this.http.post(this.logurl, { username, password }, { withCredentials: true });\r\n    }\r\n    ;\r\n    async getUser(username, password) {\r\n        let user;\r\n        var body = {\r\n            username: username,\r\n            password: password\r\n        };\r\n        let response = await fetch(this.usurl, {\r\n            method: \"POST\",\r\n            mode: 'cors',\r\n            body: JSON.stringify(body),\r\n            credentials: \"include\"\r\n        });\r\n        let data = await response.json();\r\n        if (response.status === 200) {\r\n            user = data;\r\n            localStorage.setItem('fName', data.firstname);\r\n            localStorage.setItem('lName', data.lastname);\r\n            localStorage.setItem('dob', data.dob);\r\n            localStorage.setItem('email', data.email);\r\n            localStorage.setItem('id', data.user_id);\r\n            console.log(user);\r\n        }\r\n        return user;\r\n    }\r\n    register(username, email, password) {\r\n        return this.http.post(this.regurl, { username, email, password });\r\n    }\r\n}\r\nLoginService.ɵfac = function LoginService_Factory(t) { return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient)); };\r\nLoginService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: LoginService, factory: LoginService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}